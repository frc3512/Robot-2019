plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2019.4.1"
    id "org.ysb33r.doxygen" version "0.5"
}

task pythonTask(type: Exec) {
    workingDir 'python'
    commandLine 'python3', 'generate_src.py'
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(3512)
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            binaries {
              all {
                if (it.buildType.name.contains('debug')) {
                  it.buildable = false
                }
              }
            }

            binaries.all {
                binary ->
                binary.getTasks().withType(AbstractNativeSourceCompileTask) {
                    it.dependsOn pythonTask
                }
                if (!(toolChain instanceof VisualCpp)) {
                    cppCompiler.args << '-O2' << '-Wno-deprecated-declarations'
                }
            }

            sources.cpp {
                source {
                    srcDirs = ['src/main/cpp', 'thirdparty/cpp', 'build/generated/cpp']
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDirs = ['src/main/include', 'thirdparty/include', 'build/generated/include']
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                }
            }

            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            useLibrary(it, "wpilib")
            wpi.deps.vendor.cpp(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            useLibrary(it, "wpilib", "googletest")
            wpi.deps.vendor.cpp(it)
        }
    }
}

doxygen {
    description = 'Generate documentation'

    project_name 'Robot-2019'

    generate_html true
    generate_latex false

    source 'src/main/include'

    outputDir 'build/docs/'

    executables {
        doxygen version: '1.8.15'
    }
}
